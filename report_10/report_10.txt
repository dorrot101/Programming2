[プログラムの説明]
  練習問題19 -1
	(1): X 0以上99以下の添字が使える。
	(2): O length()メソッドで要素数が得られる。
	(3): X (1)のように0以上99以下の添字だけ得られる。
	(4): O LinkedListクラスはHeadポインターで先頭要素だけ操作することができる。
	(5): X 全ての値を得るにはvaluesメソッドを使う必要がある。

　練習問題19－2
	(1): (a)コンパイルエラーを起こす。
	(2): Chrisが得られる。  
	(3):  3が得られる。
　概要：リストとその逆リストの内容を確認するプログラムである。
　内容：リストを生成し内容を追加する。以後、その内容の順番を逆にした逆リストを生成してまた内容を確認する。
　細部：内容を反転させるに元リストの最後の要素から最初の要素順に新しい逆リストに入れる。他の内容は教科書の内容を基に作成し、出力する所を除いて注釈処理した。

　練習問題19－3
　概要：自作のString型ArrayListの機能を確認するプログラムである。
　内容：内容の追加、確認、容量を求める機能を実装し、間違った要素の参照への例外処理も行っている。
　細部：コンストラクターは二つで引数を持たないなものと最初容量が指定できる仕様で、引数を持たないと容量を1にしている。追加する際に追加する所を指定するTAILPOINTER変数が指す要素が容量を超えると、既存の容量を2倍した新しい配列を生成し内容を移動させてから追加作業を行う。確認する際に配列の容量を超えるか0以下の要素を参照すると例外を投げるようにしている。容量は内部配列のarの長さを返還させる。

　課題１
　概要：逆ポーランド表記法による計算を行うプログラムである。
　内容：入力した式を分けて文字ごとに分離する。以後、手続きに合わせて式の結果を求める。発生する例外については別途処理を行う。
　細部：分離した文字を順序に判別して数字であればスタックに入れて、四則演算記号であるばスタックの数字を取って計算を行う。それ以外は例外を投げる。演算記号による演算はスタックの上から2つの値を取り除いて記号に合う演算を行い、その結果をスタックに入れる。スタックから2つの値を取れない場合、例外を投げる。式の文字がなくなるまで処理を行い、最後にスタックに残っている値が結果になる。スタックに1つ以上の値が残っていれば例外を投げる。

　課題2（修正１）
　概要：信号灯の点滅頻度や車両の発生頻度数で平均車両通過台数や平均待機時間を求めるプログラムである。
　内容：コマンドラインで点滅、車両発生頻度を入力して、信号灯の点滅を具現し青信号の際に待機している車両を通過させる構造である。
　細部：1秒＝1stepで、10000秒シミュレーションさせた結果を求める。ループするたびにstepを各頻度数で割り、0になる場合頻度数の種類に合わせて車両を発生させるか、信号を変える。以後、青信号で待機列に車両がある場合、1秒ことに1台通過させる。通過する際には現在のstepからキューの最初要素の発生時刻(currentStep)を引いた結果を総待機時間に入れる。また、総通過車両通過台数も生成して1を足す。ループが終わると総車両通過台数を10000秒で割って平均車両通過台数を求めて、総待機時間を総車両通過台数で割って平均待機時間を求める。
　発展：周期の調整は一般的に考えられるが、より現実的な具現のためにはまず、道路を拡張する必要がある。現状では一方通行の道一つしかないため、別の変数に車両生成周期を持たせると道路を拡張することになる。また、本プログラムでは点滅頻度が一定であるが、現実では青信号がもっと長い横断歩道のある道路もある一方、赤信号がより長い交差路のような道路もありうる。従って、道路の種類に合わせて別々の点滅周期を設定する可能性も考えられる。

＋発展：周期の調整は一般的に考えられるが、より現実的な具現のためにはまず、道路を拡張する必要がある。現状では一方通行の道一つしかないため、別の変数に車両生成周期を持たせると道路を拡張することになる。また、本プログラムでは点滅頻度が一定であるが、現実では青信号がもっと長い横断歩道のある道路もある一方、赤信号がより長い交差路のような道路もありうる。従って、道路の種類に合わせて別々の点滅周期を設定する可能性も考えられる。

[まとめ]
　基本的なデータ構造を練習した。多数のデータを扱いには基本的に配列が使われる。しかし、配列だけではアルゴリズムを具現する際に管理や操作が難しくなる場合が多いので、今回ArrayListを直接具現したように配列を内蔵して操作機能を追加したデータ構造が効率的な面でよく使われる。次回から実習するアルゴリズムの具現にも様々なデータ構造が使われるので場合に合う適切なデータ構造を使う必要があると考えられる。

[理解度]
　B

[感想]
　本格的な資料構造を用いたプログラミングができて面白かったです。最近アルゴリズムトレーニングを始めましたが、今後の課題にも役に立つと思います。

[特記事項]
　修正1：07/15
