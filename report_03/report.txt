[プログラムの説明]
 演習１
 概要 : 入力したx,y方向移動距離による車の移動様子が分かるプログラムである。
 構成 : 最初に車の諸元を出力してから、燃料が無くなるまでにx,y方向に移動した現在の座標や走行距離を出力する。
 細部 : 動画の内容に加えて車の諸元出力の所で製造日も出力している。燃費は1km/Lに設定している。燃料が足りなくて入力した距離まで移動できない場合には、残っている燃料で行ける座標までx,y方向に同じ距離を移動する。つまりy=xグラフのように動く。

 演習２ 
 概要 : 二人の口座情報を出力してから二人の預金を比較するプログラムである。
 構成 : 定期預金する口座と普通口座を区別して生成し、名義人、口座番号、種類による預金、生成日などの二つの口座情報を出力して、預金を二人ずつ比較する。
 細部 : 정기예금은 자식클래스에 별도로 변수를 생성하여 관리한다. 예금 비교는 깔끔하지는 않지만 comp함수의 사양에 맞추어 switch-case문으로 출력을 결정하고 있다. Day클래스는 연습문제1에 사용하였던 클래스를 기본으로 교과서 클래스의 메소드를 적절히 넣었다. Account클래스도 교과서를 참조하였다. 출력은 영상의 내용을 그대로 따라하였다.  

 課題１  
 概要 : 3回のカレーとそのオプションの注文を受けて出力するプログラムである。
 構成 : カレー、トッピング、サラダ順に注文を受ける。カレーは基本的に注文するが、トッピングとサラダは選択するものとする。また、指定された番号や文字以外の入力には再入力が求められる。
 細部 : メニューの品名と価格を各々配列化して管理しやすくした。選択したオプションによって生成するクラスが異なる。文字の入力に対してはchar入力ができないため、String型に受けてcharAt(0)で一文字を抜いた。

char입력이 안되므로 string입력을 받아서 charat(0)함수로 한 글자만 떼내어 썼다. 출력은 영상의 서식을 참고로 하였다.

 課題２
 概要 : cos関数、ノコギリ関数、x=0のグラフを出力するプログラムである。
 構成 : 各関数別にシンボルを1，2，3で設定して三つのグラフを区別している。xを増加させてf(x)の様子が確認できる。ここでxRangeが一周期になり、Y_MAXが振幅になる。
 細部 : JAVA内蔵関数のcos,toRadians,floorなどと型返還(double),(int)を利用して整数間割り算での結果の損失、int/intが小数点以下が捨てられることを防止した。使った式は注釈に残している。

radian으로 cos에 필요한 각을 변환하고 이렇게 변환할때 tx/cycle을 이용하여 360도를 cycle등분하였다. 이후 임시로 sinx값을 구해주고 range를 곱해서
rsinx값을 구해주었다. 마지막으로는 사분면을 구분하여 sinx가 +/-가 되는 조건을 마련하였다. 사분면을 구하는 식에서는 소숫점이 발생할 경우를 위해 double선언하여 값 손실을 막았고
rsinx를 구하는 과정에서는 int매개변수를 위해 (int)형변환하였다. 
cos함수에서는 잘 알고있는 x^2 + y^2 = r^2 식을 y에 대해서 정리했다. xRange가 1주기니까 4등분해서 사분면을 구분한 후에 y값은 (y_min, y_max)범위내에서만 움직였다. 

[まとめ]
 相続を本格的に使用した。既存に作成したクラスと類似なクラスを丸ごとコピーして書くのではなくて相続宣言することで、相続したクラスの変数や機能が使え、関係も把握できる効率的は機能であると考える。
 상속을 본격적으로 사용하였다. 기존에 작성한 클래스와 유사한 클래스를 전체 복붙하지 않고 기능을 그대로 사용하면서 관계도 정립이 되는 효율적인 기능인 것 같다. 문제를 풀때는 교과서 내용을 그대로 쓰다보니 protected는 못썼지만
 외부의 접근을 막으면서도 상속 필드에서만 사용가능하게하는게 유용한 것 같다. 과제1,2는 쉬울 줄 알았는데 과제 2의 sin함수 구하는 과정에서 원하는 그림이 잘 나오지 않는다. 원공식을 이용해서 풀어보아도 예시와는 다르게 간격이 매우 커졌는데 
 좀더 연구가 필요해보인다. 연습1,2에서 했던 것처럼 기존에 작성한 클래스를 조금만 변형해서 사용하니 좋다?  연습1,2는 교과서랑 전 내용을 그대로 쓰다보니 protected는 안썼는데 썼으면 변수가 몇개 줄었을 것 같다.
 [理解度]
 b
[感想]
 課題1を解く際に考えましたが、一般的に出力の
 과제2에서 cos함수룰 구할때 어떻게 해야 저게 나올지 알고싶다. 전에 생각했던건 x^2 + y^2 = r^2공식이 아니라  대충 2 간격으로 2,4,6,8,10,8,6... 이렇게 생성되는 함수를 생각했는데 모양은 얼추 비슷했지만 주기나 그런게 커질수록 모양이 이상해져서
원상복귀했다. 재제출하게되면 조금 더 생각해보겠다. 
 과제1하면서 든 생각인데 출력서식은 보통 어떻게 하는지 궁금하다. 일반적으로도 테스트클래스에 print랑 if for 붙여가면서 저렇게 하는 것인지 아니면 좀더 가독성이 좋은 방법으로 하는지 궁금하다.
 

[特記事項]
 特にない。