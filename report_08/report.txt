[プログラムの説明]
　演習問題１
　概要：与えられた文字列を構成する文字の値データを特定の形式で出力するプログラムである。
　内容：コマンドラインを通じた文字列の入力に対して、文字列をアルファベット単位で切りその文字が持つ値を10進数や16進数で出力する。
　細部：文字別に切るためにループさせてcharAtメソッドで値を求める。文字を数値化させるためにchar-0の形で変換させる。入力値がいない場合、入力形式を案内する。

　演習問題2
　概要：二つの文字列を入力し、一致する所を同じ列に整列して出力するプログラムである。
　内容：二つの文字列を入力する。その二つを比較して一致する所がないとメッセージを出力し、ある場合には一致する所が分かるように整列して出力する。
　細部：文字列の順序は問わない。短い方が長い方に含まれるのが明らかであるため、3項演算子とindexOfで重なっている位置を示すindexを設定する。indexが-1になると何も重なっていないため特定のメッセージを出力する。それ以外はindexに代入された値によって長い文字列が先に出力され、以後indexの値分空白を出力してから短い方を出力する。

　演習問題３
　概要：引数の数に従ってカレンダーを出力するプログラムである。
　内容：コマンドラインを通じて入力した引数の数によって出力するカレンダーの種類が異なる。0個なら現在の年月のカレンダー、1個なら与えられた年全てのカレンダー、2個なら与えられた年と月のカレンダーを出力する。
　細部：曜日を求めるために、与えられたDayofWeekメソッドを利用する。どのメソッドも基本的な構造は共有していて、毎月の1日の曜日を求めてその分空白を出力し、以後その月の末日まで順序に出力しながら日曜日になる日だけ改行する構造になっている。閏年を考慮した条件を付けている。カレンダーの書式は一文字当たり2スペースで、文字間に1スペースと設定している。

　練習問題15－1
　１）X　無限ループによるスタックオーバーフローなどのメモリ不足によるエラーが起こりうる。
　２）O　nullキーワードの代入とは何も参照しないことを示す。
　３）O　自動的にメモリの割当や使わないメモリの解除を行う仕組みである。
　４）O	obj1はあるインスタンスを指しているものなので、obj2に代入される値もそのインスタンスを指すものになる。

　練習問題15－2
　解：ジマイマ、レベッカ、ミトン、フロプジー、ピーター、ベンジャミン、
　手続き：　以下、COUNTA[] = A[]、COUNTB[] = B[]とみなす。
　１．コードに出る変数名を並べるとq,r,a,b,c,d,A[0~3],B[0~3],eになる。
　２．順序に代入文を解いていくと以下のような関係が成立する。

　1) q,r,a,B[3] = 変化なし	
　2) b = c = A[2] == null // 4)によってA[2]が何も参照しなくなったのでb,cも何も参照しない。
　3) d = A[0] = A[1] == null;
　4) A[0~3] = null;
　5) B[1] = B[2] == null;
　6) B[0].friend = null;
　7) e = null;

　３．従って残っているのはq,r,a,B[0].name,B[3],B[3].friendのインスタンスである。
	

　課題
　概要：辞書ファイル内の単語を検索できるプログラムである。
　内容：英日辞書の内容を入力データによって、英語で検索、入力した日本語が出る単語の出力、入力した単語と前方が一致する単語の出力を行う。
　細部：英語を日本語のパートはsplitメソッドで"\t"の所を基準に分けられる。ローディングが完了するとロード完了のメッセージを出力する。searchEWordでは完全に等しい単語を探すため、equals()メソッドを使う。searchJWordでは含まれてさえいれば良いので、indexOf != -1な文を探して改行しながら連結する。searchREWordではindexOf==0の場合、文字列間に最初から一致するのでその文を返還する。

[まとめ]
　文字列とガーベージコレクターについて練習した。文字通り文字を並べたものであるためchar[]型に生成しても作動はするが、管理するに便利なメソッドを提供するStringクラス型で使うのが一般的である。JAVAでは文字をUNICODEで扱うので様々な言語を表現することができる長所がある。文字列がStringインスタンスで生成されると、出力してから使わなく文字列が生じる場合があるが、このような文字列がガーベージコレクターに自動的に回収される仕組みになっている。JAVAはC系列の言語とは違って低水準のメモリーを直接扱わないのでコレクターによる自動的なメモリー管理に依存している。この場合システムがメモリーを回収するまでは空間を占めるなどの性能低下の恐れがあるが、Ｃ言語もメモリーを正確に管理しないと無くなったアドレスに接近するか、メモリーの漏れが起こりうるのでコレクターを使うと安定的なメモリーの管理ができると考えられる。

[理解度]
　B

[感想]ㅇㅇ
　面白かったです。C++を扱う際にはメモリーの割当や解除に気を付かなければなりませんでしたが、JAVAは余り気にしなくて良かったので気楽でした。でも、ゲームにＣ++が良く使われる理由を考えて見るとメモリー管理がもたらす長所も無視できないので、unmanaged言語を学ぶのも重要だと思います。

[特記事項]
　特にありません。