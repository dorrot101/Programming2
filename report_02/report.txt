[プログラムの説明]
　演習１
　概要：インスタンスを生成するたびにIDを増加させて確認するプログラムである。
　構成：各インスタンスのIDと最後に与えたIDを出力する。また、途中にIDの増加値を変換させてIDへの影響を確認する。
　細部：増分値やゲッター、セッターなどをクラスメソッドやクラス変数に設定して、インスタンスによらずに共通作用する仕組みである。また、step,counterなどをprivate化してゲッター、セッター以外の操作を防止した。

　演習２
　概要：与えられた数値の中で最大値と最小値を確認するプログラムである。
　構成：ランダムに整数や実数を2つ、3つ、幾つか（ここでは50個）の単位で各々の最大値最小値を確認している。
　細部：整数部は100以下に、小数点は3桁以下に制限している。また、パラメータ数や資料型が違うgetMax,getMINメソッドをoverloadして、同じ関数名で号出できる。最後にクラス名だけで関数の呼び出しができる。

　演習３
　概要：年月日をクラスの引数に受けて、実装したメソッドを確認するプログラムである。
　構成：設定した日付の前後関係、過ぎた日数、残った日数、N日前後の日付を求めるか、N日前後に日付を変更する機能を確認している。また、不正な入力の対応も確認する。
　細部：引数を持たないコンストラクタではCalenderクラスを用いて、生成する日の日付に設定している。また、過ぎた日数は当日を含めて、残った日数は当日を除いて計算している。最後に全メソッドはインスタンスメソッドで実装した。

　課題
　概要：入力された4つの値を各々2、8、10、16進数で表現するプログラムである。
　構成：配列4つの値を入力して、基数を変更しながら進数表現を確認する。
　細部：int型の値に対して進数表現を確認している。本プログラムではintの正の最大値やオバーフローを起こした結果を確認するほか、特定の値に2倍に1を足した時の規則的な変化も確認している。

[まとめ]
　インスタンスによらない変数やメソッドに関して練習した。ユーティリティクラスのようにインスタンスを生成しなくてもメソッドが利用できることは効率的であると考えた。また、全インスタンスで使われる値をインスタンス別に設定せず、一つのメソッドで設定できるのは可読性と性能両方に利得があると考える。本プログラムでパッケージは使用してはいないが、ファイルの構造や構成に関して勉強になった。
　A
[感想]
　特に問題はありませんでしたが、演習3を解く際に例外処理などが簡潔にできませんでした。閏年を顧慮した処理を別のメソッドで具現したら可読性や性能にも利得があったのではないかと思います。それに各メソッドに臨時変数を作ることと別の関数を呼び出すことの間に性能の差があるかを知りたいです。

[特記事項]
 本課題にもDoomsdayアルゴリズムを用いました。また、演習3で生成時の日付を求めるためにCalenderクラスを利用しました。
